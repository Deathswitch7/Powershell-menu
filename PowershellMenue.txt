using namespace System.Management.Automation.Host
$uservalue = Read-Host 'Enter your password' -AsSecureString 
Write-Output $uservalue

# Secure input...
$credin = Get-Credential 
Write-Output $credin
function New-Menu {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Title,

        [Parameter(Mandatory)]
        [ValidateNotNullOrEmpty()]
        [string]$Question
    )
    
    $Chocolate = [ChoiceDescription]::new('&Chocolate', 'Favorite flavour: Chocolate')
    $Straberry = [ChoiceDescription]::new('&Strawberry', 'Favorite flavour: Strawberry')
    $Vanilla = [ChoiceDescription]::new('&Vanilla', 'Favorite flavour: Vanilla')

    $options = [ChoiceDescription[]]($Chocolate, $Straberry, $Vanilla)

    $result = $host.ui.PromptForChoice($Title, $Question, $options, 0)

    switch ($result) {
        0 { Get-ChildItem | Select-Object -Property Steps, Method  | ConvertTo-HTML -Pre "<h1>Chocolate donought recipie</h1>" -Post ("<h1>As of " + (Get-Date) + "</h1>")
        Invoke-Item  Donut1.HTML }
        1 { Get-ChildItem | Select-Object -Property Steps, Method  | ConvertTo-HTML -Pre "<h1>Chocolate donought recipie</h1>" -Post ("<h1>As of " + (Get-Date) + "</h1>")
        Invoke-Item  Donut2.HTML }
        2 { Get-ChildItem | Select-Object -Property Steps, Method  | ConvertTo-HTML -Pre "<h1>Chocolate donought recipie</h1>" -Post ("<h1>As of " + (Get-Date) + "</h1>")
        Invoke-Item  Donut3.HTML }
    }

}
New-Menu -Title 'Donought Recipie' -Question 'Which recipie do you want to choose?'